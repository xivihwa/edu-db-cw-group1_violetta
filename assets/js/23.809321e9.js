(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{657:function(e,n,s){"use strict";s.r(n);var i=s(34),r=Object(i.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[e._v("#")]),e._v(" Реалізація інформаційного та програмного забезпечення")]),e._v(" "),s("h2",{attrs:{id:"sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[e._v("#")]),e._v(" SQL-скрипт для створення на початкового наповнення бази даних")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema quiz\n-- -----------------------------------------------------\nDROP SCHEMA IF EXISTS `quiz` ;\n\n-- -----------------------------------------------------\n-- Schema quiz\n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `quiz` DEFAULT CHARACTER SET utf8 ;\nUSE `quiz` ;\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Role`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Role` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Role` (\n`id` INT NOT NULL,\n`name` VARCHAR(32) NULL,\nPRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Permission`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Permission` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Permission` (\n`id` INT NOT NULL,\n`name` VARCHAR(32) NULL,\nPRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Grant`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Grant` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Grant` (\n`id` INT NOT NULL,\n`appointed` DATE NULL,\n`Role_id` INT NOT NULL,\n`Permission_id` INT NOT NULL,\nPRIMARY KEY (`id`, `Role_id`, `Permission_id`),\nINDEX `fk_Grant_Role1_idx` (`Role_id` ASC) VISIBLE,\nINDEX `fk_Grant_Permission1_idx` (`Permission_id` ASC) VISIBLE,\nCONSTRAINT `fk_Grant_Role1`\nFOREIGN KEY (`Role_id`)\nREFERENCES `quiz`.`Role` (`id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION,\nCONSTRAINT `fk_Grant_Permission1`\nFOREIGN KEY (`Permission_id`)\nREFERENCES `quiz`.`Permission` (`id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`User`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`User` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`User` (\n`id` INT NOT NULL AUTO_INCREMENT,\n`first_name` VARCHAR(45) NULL,\n`last_name` VARCHAR(45) NULL,\n`nick_name` VARCHAR(45) NULL,\n`email` VARCHAR(128) NULL,\n`password` VARCHAR(64) NULL,\n`Role_id` INT NOT NULL,\nPRIMARY KEY (`id`, `Role_id`),\nINDEX `fk_User_Role1_idx` (`Role_id` ASC) VISIBLE,\nUNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,\nUNIQUE INDEX `nick_name_UNIQUE` (`nick_name` ASC) VISIBLE,\nCONSTRAINT `fk_User_Role1`\nFOREIGN KEY (`Role_id`)\nREFERENCES `quiz`.`Role` (`id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Survey`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Survey` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Survey` (\n`id` INT NOT NULL,\n`title` VARCHAR(45) NULL,\n`description` LONGTEXT NULL,\n`created` DATE NULL,\n`User_id` INT NOT NULL,\n`User_Role_id` INT NOT NULL,\nPRIMARY KEY (`id`, `User_id`, `User_Role_id`),\nINDEX `fk_Survey_User1_idx` (`User_id` ASC, `User_Role_id` ASC) VISIBLE,\nCONSTRAINT `fk_Survey_User1`\nFOREIGN KEY (`User_id` , `User_Role_id`)\nREFERENCES `quiz`.`User` (`id` , `Role_id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Question`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Question` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Question` (\n`id` INT NOT NULL,\n`text` LONGTEXT NULL,\n`type` VARCHAR(32) NULL,\n`Survey_id` INT NOT NULL,\n`Survey_User_id` INT NOT NULL,\n`Survey_User_Role_id` INT NOT NULL,\nPRIMARY KEY (`id`, `Survey_id`, `Survey_User_id`, `Survey_User_Role_id`),\nINDEX `fk_Question_Survey1_idx` (`Survey_id` ASC, `Survey_User_id` ASC, `Survey_User_Role_id` ASC) VISIBLE,\nCONSTRAINT `fk_Question_Survey1`\nFOREIGN KEY (`Survey_id` , `Survey_User_id` , `Survey_User_Role_id`)\nREFERENCES `quiz`.`Survey` (`id` , `User_id` , `User_Role_id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Answer`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Answer` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Answer` (\n`id` INT NOT NULL,\n`text` LONGTEXT NULL,\n`User_id` INT NOT NULL,\n`User_Role_id` INT NOT NULL,\n`Question_id` INT NOT NULL,\n`Question_Survey_id` INT NOT NULL,\n`Question_Survey_User_id` INT NOT NULL,\n`Question_Survey_User_Role_id` INT NOT NULL,\nPRIMARY KEY (`id`, `User_id`, `User_Role_id`, `Question_id`, `Question_Survey_id`, `Question_Survey_User_id`, `Question_Survey_User_Role_id`),\nINDEX `fk_Answer_User1_idx` (`User_id` ASC, `User_Role_id` ASC) VISIBLE,\nINDEX `fk_Answer_Question1_idx` (`Question_id` ASC, `Question_Survey_id` ASC, `Question_Survey_User_id` ASC, `Question_Survey_User_Role_id` ASC) VISIBLE,\nCONSTRAINT `fk_Answer_User1`\nFOREIGN KEY (`User_id` , `User_Role_id`)\nREFERENCES `quiz`.`User` (`id` , `Role_id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION,\nCONSTRAINT `fk_Answer_Question1`\nFOREIGN KEY (`Question_id` , `Question_Survey_id` , `Question_Survey_User_id` , `Question_Survey_User_Role_id`)\nREFERENCES `quiz`.`Question` (`id` , `Survey_id` , `Survey_User_id` , `Survey_User_Role_id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`State`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`State` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`State` (\n`id` INT NOT NULL,\n`name` VARCHAR(32) NULL,\nPRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\n-- -----------------------------------------------------\n-- Table `quiz`.`Action`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `quiz`.`Action` ;\n\nCREATE TABLE IF NOT EXISTS `quiz`.`Action` (\n`id` INT NOT NULL,\n`date` DATE NULL,\n`Survey_id` INT NOT NULL,\n`Survey_User_id` INT NOT NULL,\n`Survey_User_Role_id` INT NOT NULL,\n`Role_id` INT NOT NULL,\n`State_id` INT NOT NULL,\nPRIMARY KEY (`id`, `Survey_id`, `Survey_User_id`, `Survey_User_Role_id`, `Role_id`, `State_id`),\nINDEX `fk_Action_Survey1_idx` (`Survey_id` ASC, `Survey_User_id` ASC, `Survey_User_Role_id` ASC) VISIBLE,\nINDEX `fk_Action_Role1_idx` (`Role_id` ASC) VISIBLE,\nINDEX `fk_Action_State1_idx` (`State_id` ASC) VISIBLE,\nCONSTRAINT `fk_Action_Survey1`\nFOREIGN KEY (`Survey_id` , `Survey_User_id` , `Survey_User_Role_id`)\nREFERENCES `quiz`.`Survey` (`id` , `User_id` , `User_Role_id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION,\nCONSTRAINT `fk_Action_Role1`\nFOREIGN KEY (`Role_id`)\nREFERENCES `quiz`.`Role` (`id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION,\nCONSTRAINT `fk_Action_State1`\nFOREIGN KEY (`State_id`)\nREFERENCES `quiz`.`State` (`id`)\nON DELETE NO ACTION\nON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n")])])]),s("h2",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[e._v("#")]),e._v(" RESTfull сервіс для управління даними")]),e._v(" "),s("p",[e._v("RESTfull сервіс для управління таблиці User у базі даних 'quiz' створеної в MySQL. Цей застосунок був створений за допомогою\nфреймворку Flask на мові Python.\nRESTfull сервіс представляє собою базовий CRUD застосунок, тобто \"Набор джентельмена\", Create, Read, Update і Delete.")]),e._v(" "),s("h3",{attrs:{id:"фаил-app-py"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#фаил-app-py"}},[e._v("#")]),e._v(" Файл app.py")]),e._v(" "),s("h4",{attrs:{id:"імпорти"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#імпорти"}},[e._v("#")]),e._v(" Імпорти:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napi = Api(app)\n")])])]),s("h4",{attrs:{id:"конфігурація-бази-даних-mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#конфігурація-бази-даних-mysql"}},[e._v("#")]),e._v(" Конфігурація бази даних MySQL:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:D18132004_ua@localhost/quiz'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n")])])]),s("h4",{attrs:{id:"створення-моделі-для-user-і-role"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#створення-моделі-для-user-і-role"}},[e._v("#")]),e._v(" Створення моделі для User і Role:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("class RoleModel(db.Model):\n__tablename__ = 'Role'\nid = db.Column(db.Integer, primary_key=True)\nname = db.Column(db.String(45))\n\nusers = db.relationship('UserModel', backref='role')\n")])])]),s("h4",{attrs:{id:"модель-user"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#модель-user"}},[e._v("#")]),e._v(" Модель User:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('class UserModel(db.Model):\n__tablename__ = \'User\'\nid = db.Column(db.Integer, primary_key=True, autoincrement=True)\nfirst_name = db.Column(db.String(45))\nlast_name = db.Column(db.String(45))\nnick_name = db.Column(db.String(45), unique=True)\nemail = db.Column(db.String(128), unique=True)\npassword = db.Column(db.String(64))\nrole_id = db.Column(db.Integer, db.ForeignKey(\'Role.id\'), nullable=False)\n\ndef to_dict(self):\n    return {\n        "id": self.id,\n        "first_name": self.first_name,\n        "last_name": self.last_name,\n        "nick_name": self.nick_name,\n        "email": self.email,\n        "password": self.password,\n        "role_id": self.role_id\n    }\n')])])]),s("h4",{attrs:{id:"ініціалізація-бази-даних"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ініціалізація-бази-даних"}},[e._v("#")]),e._v(" Ініціалізація бази даних:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("with app.app_context():\ndb.create_all()\n\nclass User(Resource):\ndef get(self, user_id=None):\nif user_id is None:\nusers = UserModel.query.all()\nreturn [user.to_dict() for user in users]\nelse:\nuser = UserModel.query.get(user_id)\nif user:\nreturn user.to_dict()\nreturn {'message': 'User not found'}, 404\n\ndef post(self):\n    data = request.get_json()\n    existing_user_email = UserModel.query.filter_by(email=data.get('email')).first()\n    existing_user_nick = UserModel.query.filter_by(nick_name=data.get('nick_name')).first()\n    if existing_user_email is not None:\n        return {'message': 'User with this email already exists'}, 400\n    if existing_user_nick is not None:\n        return {'message': 'User with this nickname already exists'}, 400\n    new_user = UserModel(\n        first_name=data.get('first_name'),\n        last_name=data.get('last_name'),\n        nick_name=data.get('nick_name'),\n        email=data.get('email'),\n        password=data.get('password'),\n        role_id=data.get('role_id')\n    )\n    db.session.add(new_user)\n    db.session.commit()\n    return {'message': 'User created successfully', 'user': new_user.to_dict()}, 201\n\ndef put(self, user_id):\n    user = UserModel.query.get(user_id)\n    if user:\n        data = request.get_json()\n        user.first_name = data.get('first_name', user.first_name)\n        user.last_name = data.get('last_name', user.last_name)\n        user.nick_name = data.get('nick_name', user.nick_name)\n        user.email = data.get('email', user.email)\n        user.password = data.get('password', user.password)\n        user.role_id = data.get('role_id', user.role_id)\n        db.session.commit()\n        return {'message': 'User updated successfully', 'user': user.to_dict()}\n    return {'message': 'User not found'}, 404\n\ndef delete(self, user_id):\n    user = UserModel.query.get(user_id)\n    if user:\n        db.session.delete(user)\n        db.session.commit()\n        return {'message': 'User deleted successfully'}, 200\n    return {'message': 'User not found'}, 404\n\napi.add_resource(User, '/users', '/users/<int:user_id>')\n\n@app.route('/')\ndef index():\nreturn \"Welcome to the User API\"\n\nif __name__ == '__main__':\napp.run(debug=True)\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);